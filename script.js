// Oyun d…ôyi≈ü…ônl…ôri
let cards = [];
let hasFlippedCard = false;
let lockBoard = false;
let firstCard, secondCard;
let moves = 0;
let matchedPairs = 0;
let totalPairs = 6;
let level = 1;
const MAX_LEVEL = 3; 
let score = 0;

// Vaxt D…ôyi≈ü…ônl…ôri
let timerInterval;
let timeElapsed = 0; 

// Xal D…ôyi≈ü…ônl…ôri
const SCORE_MATCH = 100;
const SCORE_MISMATCH = -20;

// Emoji hovuzu (70 f…ôrqli emoji) - H…ôr s…ôviyy…ôd…ô t…ôsad√ºfi se√ßil…ôc…ôk
const ALL_EMOJIS = [
    'üê∂', 'üê±', 'ü¶ä', 'üêª', 'ü¶Å', 'üêØ', 'ü¶Ñ', 'üêÆ', 'üê∑', 'üêµ', 
    'ü¶â', 'üê∏', 'üçé', 'üçä', 'üçã', 'üçá', 'üçâ', 'üçì', 'üçí', 'üçë', 
    'ü•ù', 'üçç', 'ü••', 'ü•ë', 'üöó', 'üöï', 'üöå', 'üöì', 'üöë', 'üöí', 
    'üöö', 'üö¢', 'üöÄ', 'üöÅ', 'üöÇ', 'üõ∏', '‚åö', 'üì±', 'üíª', 'üñ•Ô∏è', 
    'üîë', 'üîí', 'üîì', 'üé≤', 'üß©', 'üéà', 'üéÅ', 'üéÇ', 'üëë', 'üíç',
    'üåû', 'üåõ', '‚≠ê', 'üåà', 'üî•', 'üíß', 'üåø', 'üçÑ', 'üîî', 'üìö',
    'üî¨', 'üî≠', 'üí∞', 'üí≥', 'üìß', 'üí°', 'üìå', 'üìé', 'üíâ', 'üíä' 
];

// DOM elementl…ôri v…ô S…ôsl…ôr
let memoryBoard, movesDisplay, matchedDisplay, timerDisplay, scoreDisplay, adContainer, finalMovesDisplay, finalScoreDisplay, currentLevelDisplay, themeIcon;
let flipSound, matchSound, mismatchSound, winSound, gameoverSound;

document.addEventListener('DOMContentLoaded', function() {
    // DOM Elementl…ôrini Se√ß
    memoryBoard = document.getElementById('memory-board');
    movesDisplay = document.getElementById('moves');
    matchedDisplay = document.getElementById('matched');
    timerDisplay = document.getElementById('timer');
    scoreDisplay = document.getElementById('score');
    adContainer = document.getElementById('ad-container');
    finalMovesDisplay = document.getElementById('final-moves');
    finalScoreDisplay = document.getElementById('final-score');
    currentLevelDisplay = document.getElementById('current-level');
    themeIcon = document.getElementById('theme-icon');
    
    // S…ôs elementl…ôrini se√ß
    flipSound = document.getElementById('flip-sound');
    matchSound = document.getElementById('match-sound');
    mismatchSound = document.getElementById('mismatch-sound');
    winSound = document.getElementById('win-sound');
    gameoverSound = document.getElementById('gameover-sound');

    // D√ºym…ô hadis…ôl…ôri
    document.getElementById('restart-button').addEventListener('click', initGame);
    document.getElementById('theme-toggle-button').addEventListener('click', toggleDarkMode);

    // Tema rejimini yoxla
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-mode');
        themeIcon.textContent = '‚òÄÔ∏è';
    }
    
    startGame();
});

// Gecikm…ôsiz S…ôs Oynatma Funksiyasƒ± (Audio Elementinin Klonlanmasƒ±)
function playSound(audioElement) {
    if (!audioElement) return;
    const clone = audioElement.cloneNode();
    clone.volume = 0.5;
    clone.play();
}

// Oyunu Ba≈ülat
function startGame() {
    initGame();
}

// Oyunu sƒ±fƒ±rla v…ô ba≈üla
function initGame() {
    clearInterval(timerInterval);

    // S…ôviyy…ôy…ô g√∂r…ô kart sayƒ±nƒ± t…ôyin et
    if (level === 1) totalPairs = 6; // 12 kart
    else if (level === 2) totalPairs = 8; // 16 kart
    else if (level >= MAX_LEVEL) totalPairs = 10; // 20 kart (Maksimum)
    
    // Sƒ±fƒ±rlamalar
    memoryBoard.innerHTML = '';
    moves = 0;
    matchedPairs = 0;
    // Xal yalnƒ±z level 1-d…ôn ba≈ülananda sƒ±fƒ±rlansƒ±n
    if (level === 1) score = 0; 
    timeElapsed = 0;
    lockBoard = false;
    hasFlippedCard = false;
    firstCard = null;
    secondCard = null;

    // DOM yenil…ôm…ôl…ôri
    movesDisplay.textContent = moves;
    scoreDisplay.textContent = score;
    document.getElementById('total-pairs').textContent = totalPairs;
    matchedDisplay.textContent = matchedPairs;
    currentLevelDisplay.textContent = `(S…ôviyy…ô ${level})`;
    timerDisplay.textContent = formatTime(timeElapsed);
    timerDisplay.style.color = 'inherit'; // R…ôngi sƒ±fƒ±rla
    
    createCards();
    startTimer();
    adContainer.classList.add('hidden');
}

// Limitsiz Vaxt Sayƒüacƒ± 
function startTimer() {
    timerInterval = setInterval(() => {
        timeElapsed++;
        timerDisplay.textContent = formatTime(timeElapsed);
    }, 1000);
}

// Vaxtƒ± D…ôqiq…ô:Saniy…ô formatƒ±na √ßevirir
function formatTime(totalSeconds) {
    const minutes = Math.floor(totalSeconds / 60).toString().padStart(2, '0');
    const seconds = (totalSeconds % 60).toString().padStart(2, '0');
    return `${minutes}:${seconds}`;
}

// Kartlarƒ± yarat
function createCards() {
    // Kart qrafikini v…ô √∂l√ß√ºl…ôrini s…ôviyy…ôy…ô g√∂r…ô t…ôyin et
    memoryBoard.className = 'memory-board';
    if (totalPairs === 6) memoryBoard.classList.add('grid-4x3');
    else if (totalPairs === 8) memoryBoard.classList.add('grid-4x4');
    else if (totalPairs === 10) memoryBoard.classList.add('grid-4x5');
    
    // EMOJƒ∞ M∆èNTƒ∞Qƒ∞: H…ôr s…ôviyy…ôd…ô t…ôsad√ºfi yeni emojil…ôr
    const shuffledEmojis = shuffleArray([...ALL_EMOJIS]);
    const selectedEmojis = shuffledEmojis.slice(0, totalPairs); 
    const gameCards = selectedEmojis.flatMap(emoji => [emoji, emoji]);
    shuffleArray(gameCards);
    
    // Kart elementl…ôrini yarat
    gameCards.forEach((emoji, index) => {
        const card = document.createElement('div');
        card.classList.add('card');
        card.dataset.emoji = emoji;
        card.dataset.index = index;
        
        card.innerHTML = `<div class="front"></div><div class="back">${emoji}</div>`;
        card.addEventListener('click', flipCard);
        memoryBoard.appendChild(card);
        cards.push(card);
    });
}

// Kart √ßevirm…ô …ôm…ôliyyatƒ±
function flipCard() {
    if (lockBoard) return;
    if (this === firstCard) return;
    if (this.classList.contains('flipped')) return;

    playSound(flipSound);

    this.classList.add('flipped');
    
    if (!hasFlippedCard) {
        hasFlippedCard = true;
        firstCard = this;
        return;
    }
    
    secondCard = this;
    moves++;
    movesDisplay.textContent = moves;
    
    checkForMatch();
}

// E≈ül…ô≈üm…ôni yoxla
function checkForMatch() {
    const isMatch = firstCard.dataset.emoji === secondCard.dataset.emoji;
    
    if (isMatch) {
        score += SCORE_MATCH;
        scoreDisplay.textContent = score;

        playSound(matchSound);
        disableCards();
        matchedPairs++;
        matchedDisplay.textContent = `${matchedPairs}/${totalPairs}`;
        
        if (matchedPairs === totalPairs) {
            clearInterval(timerInterval);
            handleGameOver(true);
        }
    } else {
        score += SCORE_MISMATCH;
        if (score < 0) score = 0; 
        scoreDisplay.textContent = score;

        playSound(mismatchSound);
        unflipCards();
    }
}

// E≈ül…ô≈ü…ôn kartlarƒ± qeyd et v…ô a√ßƒ±q saxla (Animasiya il…ô)
function disableCards() {
    firstCard.classList.add('matched');
    secondCard.classList.add('matched');
    
    firstCard.removeEventListener('click', flipCard);
    secondCard.removeEventListener('click', flipCard);
    
    resetBoard();
}

// E≈ül…ô≈üm…ôy…ôn kartlarƒ± geri √ßevir
function unflipCards() {
    lockBoard = true;
    
    setTimeout(() => {
        firstCard.classList.remove('flipped');
        secondCard.classList.remove('flipped');
        resetBoard();
    }, 1000);
}

// Oyun l√∂vh…ôsini sƒ±fƒ±rla
function resetBoard() {
    hasFlippedCard = false;
    lockBoard = false;
    firstCard = null;
    secondCard = null;
}

// Oyun Bitdi Paneli
function handleGameOver(isSuccess) {
    lockBoard = true;

    finalMovesDisplay.textContent = moves;
    finalScoreDisplay.textContent = score;
    
    const adTitle = document.getElementById('ad-title');
    const finalMessage = document.querySelector('.final-message');
    const nextLevelBtn = document.getElementById('next-level');
    const restartLevelBtn = document.getElementById('restart-level'); // Yenil…ônmi≈ü d√ºym…ô

    if (isSuccess) {
        playSound(winSound);
        
        if (level < MAX_LEVEL) {
            adTitle.textContent = 'T…ôbrikl…ôr! üéâ S…ôviyy…ô Ke√ßildi!';
            finalMessage.textContent = `N√∂vb…ôti s…ôviyy…ôd…ô ${totalPairs + 2} c√ºtl√ºk olacaq.`;

            // ∆èsas d√ºym…ô: N√∂vb…ôti S…ôviyy…ô
            nextLevelBtn.textContent = `N√∂vb…ôti S…ôviyy…ô (${level + 1})`;
            nextLevelBtn.onclick = function() { level++; initGame(); };
            nextLevelBtn.style.display = 'block'; 

            // ƒ∞kinci d√ºym…ô: T…ôkrar Oyna
            restartLevelBtn.style.display = 'block';

        } else {
            adTitle.textContent = 'Oyun Bitdi! üèÜ ∆èn Y√ºks…ôk N…ôtic…ô!';
            finalMessage.textContent = `B√ºt√ºn s…ôviyy…ôl…ôri ${score} xalla tamamladƒ±nƒ±z.`;
            
            // ∆èsas d√ºym…ô: Yenid…ôn Ba≈üla (√á√ºnki ba≈üqa level yoxdur)
            nextLevelBtn.textContent = 'Yenid…ôn Ba≈üla';
            nextLevelBtn.onclick = function() { level = 1; initGame(); }; 

            // ƒ∞kinci d√ºym…ôni (T…ôkrar Oyna) gizl…ôdirik, √ß√ºnki …ôsas d√ºym…ô eyni funksiyanƒ± yerin…ô yetirir
            restartLevelBtn.style.display = 'none'; 
        }
    } 
    
    document.getElementById('restart-level').onclick = function() {
        initGame(); // Cari s…ôviyy…ôni yenid…ôn ba≈ülat
    };

    // Reklam bloku (Placeholder)
    document.getElementById('ad-content').innerHTML = `
        <div class="ad-iframe-container">
            <p>Reklamƒ±nƒ±z burada g√∂r√ºn…ôc…ôk.</p>
        </div>
    `;

    adContainer.classList.remove('hidden');
    adContainer.classList.add('show');
}

// Dizi qarƒ±≈üdƒ±rma funksiyasƒ±
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// Gece/G√ºnd√ºz Rejimi
function toggleDarkMode() {
    const isDark = document.body.classList.toggle('dark-mode');
    if (isDark) {
        localStorage.setItem('theme', 'dark');
        themeIcon.textContent = '‚òÄÔ∏è';
    } else {
        localStorage.setItem('theme', 'light');
        themeIcon.textContent = 'üåô';
    }
}
